{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @internal\n */\n\nvar PermissionType;\n\n(function (PermissionType) {\n  PermissionType[\"Dispatch\"] = \"Dispatch\";\n  PermissionType[\"Subscribe\"] = \"Subscribe\";\n})(PermissionType = exports.PermissionType || (exports.PermissionType = {}));\n/**\n * @internal\n */\n\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[\"GetState\"] = \"getState\";\n  MessageType[\"Dispatch\"] = \"dispatch\";\n  MessageType[\"Subscribe\"] = \"subscribe\";\n  MessageType[\"Unsubscribe\"] = \"unsubscribe\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n/**\n *\n * There are two types of hooks: `LifecycleHook.DispatchAction` and `LifecycleHook.UpdateAction`.\n *\n * @remarks\n * `DispatchAction` hooks are run when an action is dispatched with the `.dispatch()` function:\n *\n * ```js\n * const toastNotice = Toast.create(app, {message: 'Product saved'});\n * toastNotice.dispatch(Toast.Action.SHOW);\n * ```\n *\n * `UpdateAction` hooks are run when an action is updated, using the `.set()` function:\n *\n * ```js\n * toastNotice.set({message: 'Product could not be saved', isError: true});\n * ```\n *\n * @public\n */\n\n\nvar LifecycleHook;\n\n(function (LifecycleHook) {\n  LifecycleHook[\"UpdateAction\"] = \"UpdateAction\";\n  LifecycleHook[\"DispatchAction\"] = \"DispatchAction\";\n})(LifecycleHook = exports.LifecycleHook || (exports.LifecycleHook = {}));","map":{"version":3,"sources":["/home/alex/Documents/Work/ccfe/frontend/node_modules/@shopify/app-bridge/client/types.js"],"names":["Object","defineProperty","exports","value","PermissionType","MessageType","LifecycleHook"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;AAGA,IAAIC,cAAJ;;AACA,CAAC,UAAUA,cAAV,EAA0B;AACvBA,EAAAA,cAAc,CAAC,UAAD,CAAd,GAA6B,UAA7B;AACAA,EAAAA,cAAc,CAAC,WAAD,CAAd,GAA8B,WAA9B;AACH,CAHD,EAGGA,cAAc,GAAGF,OAAO,CAACE,cAAR,KAA2BF,OAAO,CAACE,cAAR,GAAyB,EAApD,CAHpB;AAIA;;;;;AAGA,IAAIC,WAAJ;;AACA,CAAC,UAAUA,WAAV,EAAuB;AACpBA,EAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,UAA1B;AACAA,EAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,UAA1B;AACAA,EAAAA,WAAW,CAAC,WAAD,CAAX,GAA2B,WAA3B;AACAA,EAAAA,WAAW,CAAC,aAAD,CAAX,GAA6B,aAA7B;AACH,CALD,EAKGA,WAAW,GAAGH,OAAO,CAACG,WAAR,KAAwBH,OAAO,CAACG,WAAR,GAAsB,EAA9C,CALjB;AAMA;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAIC,aAAJ;;AACA,CAAC,UAAUA,aAAV,EAAyB;AACtBA,EAAAA,aAAa,CAAC,cAAD,CAAb,GAAgC,cAAhC;AACAA,EAAAA,aAAa,CAAC,gBAAD,CAAb,GAAkC,gBAAlC;AACH,CAHD,EAGGA,aAAa,GAAGJ,OAAO,CAACI,aAAR,KAA0BJ,OAAO,CAACI,aAAR,GAAwB,EAAlD,CAHnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internal\n */\nvar PermissionType;\n(function (PermissionType) {\n    PermissionType[\"Dispatch\"] = \"Dispatch\";\n    PermissionType[\"Subscribe\"] = \"Subscribe\";\n})(PermissionType = exports.PermissionType || (exports.PermissionType = {}));\n/**\n * @internal\n */\nvar MessageType;\n(function (MessageType) {\n    MessageType[\"GetState\"] = \"getState\";\n    MessageType[\"Dispatch\"] = \"dispatch\";\n    MessageType[\"Subscribe\"] = \"subscribe\";\n    MessageType[\"Unsubscribe\"] = \"unsubscribe\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n/**\n *\n * There are two types of hooks: `LifecycleHook.DispatchAction` and `LifecycleHook.UpdateAction`.\n *\n * @remarks\n * `DispatchAction` hooks are run when an action is dispatched with the `.dispatch()` function:\n *\n * ```js\n * const toastNotice = Toast.create(app, {message: 'Product saved'});\n * toastNotice.dispatch(Toast.Action.SHOW);\n * ```\n *\n * `UpdateAction` hooks are run when an action is updated, using the `.set()` function:\n *\n * ```js\n * toastNotice.set({message: 'Product could not be saved', isError: true});\n * ```\n *\n * @public\n */\nvar LifecycleHook;\n(function (LifecycleHook) {\n    LifecycleHook[\"UpdateAction\"] = \"UpdateAction\";\n    LifecycleHook[\"DispatchAction\"] = \"DispatchAction\";\n})(LifecycleHook = exports.LifecycleHook || (exports.LifecycleHook = {}));\n"]},"metadata":{},"sourceType":"script"}
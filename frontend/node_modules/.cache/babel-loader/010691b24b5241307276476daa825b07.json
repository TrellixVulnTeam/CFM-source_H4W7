{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar FILE_URI_MATCH = /\\/\\/\\//;\nvar INVALID_RELATIVE_URL = /[/\\\\][/\\\\]/;\nvar VALID_PROTOCOLS = ['https:', 'http:'];\nvar DUMMY_HOSTNAME = 'http://test.com';\n\nfunction isSafe(redirectUrl, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.whitelist,\n      whitelist = _c === void 0 ? [] : _c,\n      _d = _b.subdomains,\n      subdomains = _d === void 0 ? [] : _d,\n      matchPath = _b.matchPath,\n      requireAbsolute = _b.requireAbsolute,\n      requireSSL = _b.requireSSL;\n\n  if (FILE_URI_MATCH.test(redirectUrl)) {\n    return false;\n  }\n\n  if (redirectUrl.startsWith('/')) {\n    if (whitelist.length > 0 || subdomains.length > 0 || requireAbsolute || requireSSL) {\n      return false;\n    }\n\n    if (matchPath) {\n      // Creating a new URL expands the pathname in case of things like `/a/../b`\n      return pathMatches(new URL(redirectUrl, DUMMY_HOSTNAME), redirectUrl, matchPath);\n    }\n\n    return !INVALID_RELATIVE_URL.test(redirectUrl);\n  }\n\n  var url;\n\n  try {\n    url = new URL(redirectUrl);\n  } catch (error) {\n    return false;\n  }\n\n  if (!VALID_PROTOCOLS.includes(url.protocol)) {\n    return false;\n  }\n\n  if (requireSSL && url.protocol !== 'https:') {\n    return false;\n  }\n\n  if (url.username || url.password) {\n    return false;\n  }\n\n  if (matchPath && !pathMatches(url, redirectUrl, matchPath)) {\n    return false;\n  }\n\n  if (!hostIsValid(url, whitelist, subdomains)) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isSafe = isSafe;\n\nfunction hostIsValid(url, whitelist, subdomains) {\n  if (!subdomains.every(function (subdomain) {\n    return subdomain.startsWith('.');\n  })) {\n    throw new TypeError('Subdomains must begin with .');\n  }\n\n  var hostname = url.hostname;\n  return whitelist.length === 0 && subdomains.length === 0 || whitelist.includes(hostname) || subdomains.some(function (subdomain) {\n    return hostname.endsWith(subdomain);\n  });\n}\n\nfunction pathMatches(url, originalUrl, matcher) {\n  var pathname = url.pathname; // Gets just the unresolve pathname, i.e., `http://foo.com/a/../b => /a/../b\n\n  var originalPathname = originalUrl.replace(url.origin, '').split('?')[0];\n  return typeof matcher === 'string' ? pathname === matcher && originalPathname === matcher : matcher.test(pathname) && matcher.test(originalPathname);\n}\n\nfunction makeSafe(url, fallback, options) {\n  return isSafe(url, options) ? encodeURI(url) : fallback;\n}\n\nexports.makeSafe = makeSafe;","map":{"version":3,"sources":["/home/alex/Documents/Work/ccfe/frontend/node_modules/@shopify/app-bridge/validate/safe-redirect.js"],"names":["Object","defineProperty","exports","value","FILE_URI_MATCH","INVALID_RELATIVE_URL","VALID_PROTOCOLS","DUMMY_HOSTNAME","isSafe","redirectUrl","_a","_b","_c","whitelist","_d","subdomains","matchPath","requireAbsolute","requireSSL","test","startsWith","length","pathMatches","URL","url","error","includes","protocol","username","password","hostIsValid","every","subdomain","TypeError","hostname","some","endsWith","originalUrl","matcher","pathname","originalPathname","replace","origin","split","makeSafe","fallback","options","encodeURI"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FILE_URI_MATCH = /\\/\\/\\//;\nvar INVALID_RELATIVE_URL = /[/\\\\][/\\\\]/;\nvar VALID_PROTOCOLS = ['https:', 'http:'];\nvar DUMMY_HOSTNAME = 'http://test.com';\nfunction isSafe(redirectUrl, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.whitelist, whitelist = _c === void 0 ? [] : _c, _d = _b.subdomains, subdomains = _d === void 0 ? [] : _d, matchPath = _b.matchPath, requireAbsolute = _b.requireAbsolute, requireSSL = _b.requireSSL;\n    if (FILE_URI_MATCH.test(redirectUrl)) {\n        return false;\n    }\n    if (redirectUrl.startsWith('/')) {\n        if (whitelist.length > 0 || subdomains.length > 0 || requireAbsolute || requireSSL) {\n            return false;\n        }\n        if (matchPath) {\n            // Creating a new URL expands the pathname in case of things like `/a/../b`\n            return pathMatches(new URL(redirectUrl, DUMMY_HOSTNAME), redirectUrl, matchPath);\n        }\n        return !INVALID_RELATIVE_URL.test(redirectUrl);\n    }\n    var url;\n    try {\n        url = new URL(redirectUrl);\n    }\n    catch (error) {\n        return false;\n    }\n    if (!VALID_PROTOCOLS.includes(url.protocol)) {\n        return false;\n    }\n    if (requireSSL && url.protocol !== 'https:') {\n        return false;\n    }\n    if (url.username || url.password) {\n        return false;\n    }\n    if (matchPath && !pathMatches(url, redirectUrl, matchPath)) {\n        return false;\n    }\n    if (!hostIsValid(url, whitelist, subdomains)) {\n        return false;\n    }\n    return true;\n}\nexports.isSafe = isSafe;\nfunction hostIsValid(url, whitelist, subdomains) {\n    if (!subdomains.every(function (subdomain) { return subdomain.startsWith('.'); })) {\n        throw new TypeError('Subdomains must begin with .');\n    }\n    var hostname = url.hostname;\n    return ((whitelist.length === 0 && subdomains.length === 0) ||\n        whitelist.includes(hostname) ||\n        subdomains.some(function (subdomain) { return hostname.endsWith(subdomain); }));\n}\nfunction pathMatches(url, originalUrl, matcher) {\n    var pathname = url.pathname;\n    // Gets just the unresolve pathname, i.e., `http://foo.com/a/../b => /a/../b\n    var originalPathname = originalUrl.replace(url.origin, '').split('?')[0];\n    return typeof matcher === 'string'\n        ? pathname === matcher && originalPathname === matcher\n        : matcher.test(pathname) && matcher.test(originalPathname);\n}\nfunction makeSafe(url, fallback, options) {\n    return isSafe(url, options) ? encodeURI(url) : fallback;\n}\nexports.makeSafe = makeSafe;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction mergeProps(obj, newObj) {\n  if (newObj === undefined) {\n    return undefined;\n  } // If setting to a different prototype or a non-object or non-array, don't merge any props\n\n\n  if (typeof obj === 'undefined' || !Object.getPrototypeOf(obj).isPrototypeOf(newObj) || newObj.constructor.name !== 'Object' && newObj.constructor.name !== 'Array') {\n    return newObj;\n  }\n\n  var clone = {};\n  Object.keys(newObj).forEach(function (key) {\n    var exists = obj.hasOwnProperty(key);\n\n    if (!exists) {\n      clone[key] = newObj[key];\n    } else {\n      if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n        clone[key] = mergeProps(obj[key], newObj[key]);\n      } else {\n        clone[key] = newObj[key];\n      }\n    }\n  }); // Copy old props that are not present in new object only if this is a simple object\n\n  Object.keys(obj).forEach(function (key) {\n    var exists = newObj.hasOwnProperty(key);\n\n    if (!exists) {\n      clone[key] = obj[key];\n    }\n  }); // Set prototype of cloned object to match original\n\n  Object.setPrototypeOf(clone, Object.getPrototypeOf(obj));\n  return clone;\n}\n\nexports.default = mergeProps;","map":{"version":3,"sources":["/home/alex/Documents/Work/ccfe/frontend/node_modules/@shopify/app-bridge/actions/merge.js"],"names":["Object","defineProperty","exports","value","mergeProps","obj","newObj","undefined","getPrototypeOf","isPrototypeOf","constructor","name","clone","keys","forEach","key","exists","hasOwnProperty","Array","isArray","setPrototypeOf","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,MAAzB,EAAiC;AAC7B,MAAIA,MAAM,KAAKC,SAAf,EAA0B;AACtB,WAAOA,SAAP;AACH,GAH4B,CAI7B;;;AACA,MAAI,OAAOF,GAAP,KAAe,WAAf,IACA,CAACL,MAAM,CAACQ,cAAP,CAAsBH,GAAtB,EAA2BI,aAA3B,CAAyCH,MAAzC,CADD,IAECA,MAAM,CAACI,WAAP,CAAmBC,IAAnB,KAA4B,QAA5B,IAAwCL,MAAM,CAACI,WAAP,CAAmBC,IAAnB,KAA4B,OAFzE,EAEmF;AAC/E,WAAOL,MAAP;AACH;;AACD,MAAIM,KAAK,GAAG,EAAZ;AACAZ,EAAAA,MAAM,CAACa,IAAP,CAAYP,MAAZ,EAAoBQ,OAApB,CAA4B,UAAUC,GAAV,EAAe;AACvC,QAAIC,MAAM,GAAGX,GAAG,CAACY,cAAJ,CAAmBF,GAAnB,CAAb;;AACA,QAAI,CAACC,MAAL,EAAa;AACTJ,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaT,MAAM,CAACS,GAAD,CAAnB;AACH,KAFD,MAGK;AACD,UAAI,OAAOV,GAAG,CAACU,GAAD,CAAV,KAAoB,QAApB,IAAgC,CAACG,KAAK,CAACC,OAAN,CAAcd,GAAG,CAACU,GAAD,CAAjB,CAArC,EAA8D;AAC1DH,QAAAA,KAAK,CAACG,GAAD,CAAL,GAAaX,UAAU,CAACC,GAAG,CAACU,GAAD,CAAJ,EAAWT,MAAM,CAACS,GAAD,CAAjB,CAAvB;AACH,OAFD,MAGK;AACDH,QAAAA,KAAK,CAACG,GAAD,CAAL,GAAaT,MAAM,CAACS,GAAD,CAAnB;AACH;AACJ;AACJ,GAbD,EAX6B,CAyB7B;;AACAf,EAAAA,MAAM,CAACa,IAAP,CAAYR,GAAZ,EAAiBS,OAAjB,CAAyB,UAAUC,GAAV,EAAe;AACpC,QAAIC,MAAM,GAAGV,MAAM,CAACW,cAAP,CAAsBF,GAAtB,CAAb;;AACA,QAAI,CAACC,MAAL,EAAa;AACTJ,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaV,GAAG,CAACU,GAAD,CAAhB;AACH;AACJ,GALD,EA1B6B,CAgC7B;;AACAf,EAAAA,MAAM,CAACoB,cAAP,CAAsBR,KAAtB,EAA6BZ,MAAM,CAACQ,cAAP,CAAsBH,GAAtB,CAA7B;AACA,SAAOO,KAAP;AACH;;AACDV,OAAO,CAACmB,OAAR,GAAkBjB,UAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction mergeProps(obj, newObj) {\n    if (newObj === undefined) {\n        return undefined;\n    }\n    // If setting to a different prototype or a non-object or non-array, don't merge any props\n    if (typeof obj === 'undefined' ||\n        !Object.getPrototypeOf(obj).isPrototypeOf(newObj) ||\n        (newObj.constructor.name !== 'Object' && newObj.constructor.name !== 'Array')) {\n        return newObj;\n    }\n    var clone = {};\n    Object.keys(newObj).forEach(function (key) {\n        var exists = obj.hasOwnProperty(key);\n        if (!exists) {\n            clone[key] = newObj[key];\n        }\n        else {\n            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n                clone[key] = mergeProps(obj[key], newObj[key]);\n            }\n            else {\n                clone[key] = newObj[key];\n            }\n        }\n    });\n    // Copy old props that are not present in new object only if this is a simple object\n    Object.keys(obj).forEach(function (key) {\n        var exists = newObj.hasOwnProperty(key);\n        if (!exists) {\n            clone[key] = obj[key];\n        }\n    });\n    // Set prototype of cloned object to match original\n    Object.setPrototypeOf(clone, Object.getPrototypeOf(obj));\n    return clone;\n}\nexports.default = mergeProps;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/Work/ccfe/frontend/src/components/DataTable.js\";\nimport * as React from 'react';\nimport Cell from './Cell';\nimport { EventListener } from '@shopify/polaris';\nimport './DataTable.css';\nexport default class DataTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderHeadingRow = (_cell, cellIndex) => {\n      const {\n        headings\n      } = this.props;\n      const {\n        cellHeights\n      } = this.state;\n      return React.createElement(Cell, {\n        key: `heading-${cellIndex}`,\n        content: headings[cellIndex],\n        header: true,\n        fixed: cellIndex === 0 || cellIndex === 1,\n        height: cellHeights[0],\n        ind: cellIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      });\n    };\n\n    this.renderRow = (_row, rowIndex) => {\n      const {\n        rows\n      } = this.props;\n      const {\n        cellHeights\n      } = this.state;\n      const heightIndex = rowIndex + 1;\n      return React.createElement(\"tr\", {\n        key: `row-${rowIndex}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, rows[rowIndex].map((_cell, cellIndex) => {\n        return React.createElement(Cell, {\n          key: `${rowIndex}-${cellIndex}`,\n          content: rows[rowIndex][cellIndex],\n          fixed: cellIndex === 0 || cellIndex == 1,\n          height: cellHeights[heightIndex],\n          ind: cellIndex,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        });\n      }));\n    };\n\n    this.setTable = table => {\n      this.table = table;\n    };\n\n    this.getTallestCellHeights = () => {\n      const rows = Array.from(this.tableRef.current.getElementsByTagName('tr'));\n      let {\n        cellHeights\n      } = this.state;\n      cellHeights = rows.map(row => {\n        const fixedCell1 = row.childNodes[0];\n        const fixedCell2 = row.childNodes[1];\n        return Math.max(row.clientHeight, fixedCell1.clientHeight, fixedCell2.clientHeight);\n      });\n      return cellHeights;\n    };\n\n    this.handleCellHeightResize = () => {\n      this.setState({\n        cellHeights: this.getTallestCellHeights()\n      });\n    };\n\n    this.state = {\n      cellHeights: []\n    };\n    this.tableRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.handleCellHeightResize();\n  }\n\n  render() {\n    const {\n      headings,\n      rows,\n      title\n    } = this.props;\n    this.renderHeadingRow = this.renderHeadingRow.bind(this);\n    this.renderRow = this.renderRow.bind(this);\n    const theadMarkup = React.createElement(\"tr\", {\n      key: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, headings.map(this.renderHeadingRow));\n    const tbodyMarkup = rows.map(this.renderRow);\n    return React.createElement(\"div\", {\n      className: \"DataTable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ScrollContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(EventListener, {\n      event: \"resize\",\n      handler: this.handleCellHeightResize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      className: \"Table\",\n      ref: this.tableRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"caption\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, title), React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, theadMarkup), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, tbodyMarkup))));\n  }\n\n}","map":{"version":3,"sources":["/home/alex/Documents/Work/ccfe/frontend/src/components/DataTable.js"],"names":["React","Cell","EventListener","DataTable","Component","constructor","props","renderHeadingRow","_cell","cellIndex","headings","cellHeights","state","renderRow","_row","rowIndex","rows","heightIndex","map","setTable","table","getTallestCellHeights","Array","from","tableRef","current","getElementsByTagName","row","fixedCell1","childNodes","fixedCell2","Math","max","clientHeight","handleCellHeightResize","setState","createRef","componentDidMount","render","title","bind","theadMarkup","tbodyMarkup"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Cell from './Cell';\nimport {EventListener} from '@shopify/polaris';\nimport './DataTable.css';\n\nexport default class DataTable extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cellHeights: [],\n      \n    };\n    \n    this.tableRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.handleCellHeightResize();\n  }\n\n  renderHeadingRow = (_cell, cellIndex) => {\n    const {headings} = this.props;\n    const {cellHeights} = this.state;\n\n    return (\n      <Cell\n        key={`heading-${cellIndex}`}\n        content={headings[cellIndex]}\n        header={true}\n        fixed={cellIndex === 0 || cellIndex === 1}\n        height= {cellHeights[0]}\n        ind={cellIndex}\n      />\n    );\n  };\n  \n  renderRow = (_row, rowIndex) => {\n    const {rows} = this.props;\n    const {cellHeights} = this.state;\n    const heightIndex = rowIndex + 1;\n\n    return (\n      <tr key={`row-${rowIndex}`}>\n        {rows[rowIndex].map((_cell, cellIndex) => {\n          return (\n            <Cell\n              key={`${rowIndex}-${cellIndex}`}\n              content={rows[rowIndex][cellIndex]}\n              fixed={cellIndex === 0 || cellIndex == 1}\n              height = {cellHeights[heightIndex]}\n              ind={cellIndex}\n            />\n          )\n        })}\n      </tr>\n    )\n  };\n\n  setTable = (table) => {\n    this.table = table;\n  }\n\n  getTallestCellHeights = () => {\n    const rows = Array.from(this.tableRef.current.getElementsByTagName('tr'));\n    let {cellHeights} = this.state;\n\n    (cellHeights = rows.map((row) => {\n      const fixedCell1 = (row.childNodes)[0];\n      const fixedCell2 = (row.childNodes)[1];\n      return Math.max(row.clientHeight, fixedCell1.clientHeight, fixedCell2.clientHeight);\n    }));\n\n    return cellHeights;\n  }\n\n  handleCellHeightResize = () => {\n    this.setState({cellHeights: this.getTallestCellHeights()});\n  }\n\n  render() {\n    const {headings, rows, title} = this.props;\n\n    this.renderHeadingRow = this.renderHeadingRow.bind(this);\n    this.renderRow = this.renderRow.bind(this);\n    \n    const theadMarkup = (\n      <tr key=\"heading\">\n        {headings.map(this.renderHeadingRow)}\n      </tr>\n    );\n\n    const tbodyMarkup = rows.map(this.renderRow);\n  \n    return (\n      <div className=\"DataTable\">\n          <div className=\"ScrollContainer\">\n          <EventListener event=\"resize\" handler={this.handleCellHeightResize} />\n          <table className=\"Table\" ref={this.tableRef}>\n            <caption>{title}</caption>\n            <thead>{theadMarkup}</thead>\n            <tbody>{tbodyMarkup}</tbody>\n          </table>\n          </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}